# -*- coding: utf-8 -*-
"""Indian Cars (Data Analysis).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IDSemRHgiL7sKIWy3M0DrYU8OvH526Rb

# **Python Exploratory Data Analysis**

### **Task 1** : Indian Cars (Data Analysis)

# Getting an overview of the dataset

- Importing the libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

"""- Loading the dataset"""

ind_cars = pd.read_csv("/content/drive/MyDrive/Week 6 - Indian Cars and Superstore sales/Indian Cars/cars_ds_final.csv")

"""- Getting first 5 values of the dataset"""

ind_cars.head()

"""- Getting last 5 values of the dataset"""

ind_cars.tail()

"""- Creating a copy of the original dataset"""

ind_cars_copy = ind_cars.copy()

"""- Making the columns of the dataset to lowercase"""

ind_cars_copy.columns=ind_cars_copy.columns.str.lower()

"""- Getting all the columns of the dataset"""

ind_cars_copy.columns

"""- Checking for null values in the dataset"""

ind_cars_copy.isna().sum()

"""- Getting information about the dataset"""

ind_cars_copy.info(verbose=True)

"""- Getting shape of the dataset"""

ind_cars_copy.shape

"""- Getting description of the dataset"""

ind_cars_copy.describe()

"""- Getting a random sample from the dataset"""

ind_cars_copy.sample()

"""#**Data Cleaning**

- Dropping unnecessary column
"""

ind_cars_copy = ind_cars_copy.drop('unnamed: 0', axis=1)

"""- Getting a random sample from the dataset"""

ind_cars_copy.sample()

"""- Dropping rows from the 'make' column which has null values"""

ind_cars_copy.dropna(subset=['make'], inplace=True)

"""- Performing string formatting"""

ind_cars_copy['ex-showroom_price'] = ind_cars_copy['ex-showroom_price'].str.replace('Rs. ', '')

ind_cars_copy['ex-showroom_price'] = ind_cars_copy['ex-showroom_price'].str.replace(',', '')

ind_cars_copy['ex-showroom_price'] = ind_cars_copy['ex-showroom_price'].astype(int)

ind_cars_copy.sample()

"""- Dropping rows from the 'displacement' column which has null values"""

ind_cars_copy.dropna(subset=['displacement'], inplace=True)

"""- Getting the count of the values present in 'drivetrain' column"""

ind_cars_copy['drivetrain'].value_counts()

"""- Checking for number of null values in 'drivetrain' column"""

ind_cars_copy['drivetrain'].isna().sum()

"""- Dropping rows from the 'drivetrain' column which has null values"""

ind_cars_copy.dropna(subset=['drivetrain'], inplace=True)

"""- Checking for number of null values in 'cylinder_configuration' column"""

ind_cars_copy['cylinder_configuration'].isna().sum()

"""- Getting the count of the values present in 'cylinder_configuration' column"""

ind_cars_copy['cylinder_configuration'].value_counts()

"""- Dropping rows from the 'cylinder_configuration' column which has null values"""

ind_cars_copy.dropna(subset=['cylinder_configuration'], inplace=True)

"""- Getting the count of the values present in 'emission_norm' column"""

ind_cars_copy['emission_norm'].value_counts()

"""- Checking for number of null values in 'emission_norm' column"""

ind_cars_copy['emission_norm'].isna().sum()

"""- Dropping rows from the 'emission_norm' column which has null values"""

ind_cars_copy.dropna(subset=['emission_norm'], inplace=True)

"""- Getting the names of the columns and putting them into a list if 'Yes' is present in them"""

columns_with_yes = ind_cars_copy.columns[ind_cars_copy.eq('Yes').any()]

columns_with_yes_list = columns_with_yes.tolist()

print("Columns with 'Yes':", columns_with_yes_list)

"""- Filing the null values to the columns_with_yes with 'No' in place of null (NaN) value"""

ind_cars_copy[columns_with_yes_list] = ind_cars_copy[columns_with_yes_list].fillna('No')

"""- Getting the names of the columns which is null and of object datatype (Exluding the numeric columns)"""

object_columns_with_nan = ind_cars_copy.columns[(ind_cars_copy.isnull().any()) & (ind_cars_copy.dtypes == 'object')]

object_columns_with_nan_list = object_columns_with_nan.tolist()

print("Object columns with NaN values:", object_columns_with_nan_list)

"""- Filing the null values to the object_columns_with_nan with 'Not Available' in place of null (NaN) value"""

replace_values = {column: 'Not Available' for column in object_columns_with_nan}

ind_cars_copy.fillna(replace_values, inplace=True)

"""- Getting information about the dataset"""

ind_cars_copy.info(verbose=True)

"""- Checking for null valuess in the dataset"""

ind_cars_copy.isna().sum()

"""- Filling the null values of 'usb_ports' columns with 0"""

ind_cars_copy['usb_ports'].fillna(0, inplace=True)

"""- Getting description about the dataset"""

ind_cars_copy.describe()

"""- Getting 5 random samples from the dataset"""

ind_cars_copy.sample(5)

"""#**Data Visualization**

- Visualizing distribution of Ex-Showroom price
"""

plt.figure(figsize=(10, 6))
ax = sns.histplot(y=ind_cars_copy['ex-showroom_price'], bins=30, kde=False)
plt.title('Distribution of Ex-Showroom Price')
plt.xlabel('Frequency')
plt.ylabel('Ex-Showroom Price')

ax.get_yaxis().get_major_formatter().set_scientific(False)

plt.show()

"""- Visualizing the count of Car Manufacturers"""

plt.figure(figsize=(12, 6))
ax = sns.countplot(x='make', data=ind_cars_copy)
plt.title('Count of Car Manufacturers')
plt.xlabel('Car Manufacturers')
plt.ylabel('Count')
plt.xticks(rotation=90)
for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='baseline', fontsize=9, color='black', xytext=(0, 5),
                textcoords='offset points')
plt.show()

"""- Visualizing the Manufacturers and their respective Models via sunburst chart"""

fig = px.sunburst(ind_cars_copy, path=['make', 'model'], title='Manufacturers and Models Sunburst Chart', hover_name = 'model')

fig.show()

"""- Visualizing Box Plot of all numeric columns"""

numeric_columns = ind_cars_copy.select_dtypes(include='number').columns

plt.figure(figsize=(16, 8))
for i, column in enumerate(numeric_columns, 1):
    plt.subplot(1, len(numeric_columns), i)
    sns.boxplot(x=ind_cars_copy[column])
    plt.title(f'Box Plot of {column}', fontsize = 7.5, fontweight = 'bold')

plt.show()

"""- Visualizing Correlation Matrix"""

numeric_columns = ind_cars_copy.select_dtypes(include='number')

correlation_matrix = numeric_columns.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Numeric Variables')
plt.show()

"""- Visualizing the scatter plot of Seating Capacity vs Number of Airbags with Ex-Showroom Price"""

plt.figure(figsize=(12, 8))
plt.scatter(ind_cars_copy['seating_capacity'], ind_cars_copy['number_of_airbags'], c=ind_cars_copy['ex-showroom_price'], cmap='viridis', alpha=0.7)
plt.colorbar(label='Ex-Showroom Price')
plt.xlabel('Seating Capacity')
plt.ylabel('Number of Airbags')
plt.title('Scatter Plot: Seating Capacity vs Number of Airbags with Ex-Showroom Price')
plt.show()

"""- Visualizing pair-plot for numeric data"""

numeric_columns = ind_cars_copy.select_dtypes(include='number')

sns.pairplot(numeric_columns)
plt.suptitle('Pair Plot of Numeric Variables', y=1.02)
plt.show()

"""- Visualizing the count of Car Models with Manufacturers"""

plt.figure(figsize=(12, 6))
sns.countplot(x='model', hue='make', data=ind_cars_copy)
plt.title('Count of Car Models with Manufacturers')
plt.xlabel('Car Models')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.legend(title='Manufacturers', loc='upper right')
plt.show()

"""- Visualzing the joint Plot of Seating Capacity vs Ex-Showroom Price"""

sns.jointplot(x='seating_capacity', y='ex-showroom_price', data=ind_cars_copy, kind='scatter')
plt.suptitle('Joint Plot: Seating Capacity vs Ex-Showroom Price', y=1.02)
plt.show()

"""- Visualizing the box Plot of Ex-Showroom Price by Manufacturers with Car Models"""

plt.figure(figsize=(12, 8))
sns.boxplot(x='make', y='ex-showroom_price', hue='model', data=ind_cars_copy)
plt.title('Box Plot: Ex-Showroom Price by Manufacturers with Car Models')
plt.xlabel('Manufacturers')
plt.ylabel('Ex-Showroom Price')
plt.xticks(rotation=90)
plt.legend(title='Car Models', loc='best')
plt.show()

"""- Visualizing the categorical Plot of Ex-Showroom Price by Car Model"""

plt.figure(figsize=(12, 8))
sns.catplot(x='ex-showroom_price', y='make', data=ind_cars_copy, kind='box')
plt.title('Categorical Plot: Ex-Showroom Price by Car Model')
plt.ylabel('Car Models')
plt.xlabel('Ex-Showroom Price')
plt.show()

"""- Visualizing the violin plot for numeric columns"""

numeric_columns = ind_cars_copy.select_dtypes(include='number')

plt.figure(figsize=(16, 8))
for i, column in enumerate(numeric_columns.columns, 1):
    plt.subplot(1, len(numeric_columns.columns), i)
    sns.violinplot(x=column, data=ind_cars_copy)
    plt.title(f'Violin Plot: {column}')
    plt.xlabel(column)

plt.tight_layout()
plt.show()